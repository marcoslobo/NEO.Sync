// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NEO.Api.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NEO.Sync.Migrations
{
    [DbContext(typeof(NeoContext))]
    [Migration("20200816171716_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NEO.Api.Models.Assets", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AdminWalletId")
                        .HasColumnName("admin_wallet_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Issued")
                        .HasColumnName("issued")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<long>("OwnerWalletId")
                        .HasColumnName("owner_wallet_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("AdminWalletId")
                        .HasName("ix_assets_admin_wallet_id");

                    b.HasIndex("Hash")
                        .HasName("assets_hash_index");

                    b.HasIndex("OwnerWalletId")
                        .HasName("ix_assets_owner_wallet_id");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("NEO.Api.Models.Blocks", b =>
                {
                    b.Property<long>("Index")
                        .HasColumnName("index")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CumulativeSysFee")
                        .HasColumnName("cumulative_sys_fee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GasGenerated")
                        .HasColumnName("gas_generated")
                        .HasColumnType("numeric");

                    b.Property<string>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MerkleRoot")
                        .IsRequired()
                        .HasColumnName("merkle_root")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NextConsensus")
                        .IsRequired()
                        .HasColumnName("next_consensus")
                        .HasColumnType("text");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnName("nonce")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnName("script")
                        .HasColumnType("jsonb");

                    b.Property<int>("Size")
                        .HasColumnName("size")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalNetFee")
                        .HasColumnName("total_net_fee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalSysFee")
                        .HasColumnName("total_sys_fee")
                        .HasColumnType("numeric");

                    b.Property<int>("TxCount")
                        .HasColumnName("tx_count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Index")
                        .HasName("index");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("NEO.Api.Models.Transactions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("N")
                        .HasColumnName("n")
                        .HasColumnType("integer");

                    b.Property<decimal>("NetFee")
                        .HasColumnName("net_fee")
                        .HasColumnType("numeric");

                    b.Property<long?>("Nonce")
                        .HasColumnName("nonce")
                        .HasColumnType("bigint");

                    b.Property<int>("Size")
                        .HasColumnName("size")
                        .HasColumnType("integer");

                    b.Property<decimal>("SysFee")
                        .HasColumnName("sys_fee")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("BlockId");

                    b.HasIndex("Hash")
                        .HasName("transactions_hash_index");

                    b.HasIndex("Id")
                        .HasName("partial_index_block_index")
                        .HasFilter("((type)::text <> 'miner_transaction'::text)");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("NEO.Api.Models.Transfers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AddressFromId")
                        .HasColumnName("address_from_id")
                        .HasColumnType("bigint");

                    b.Property<long>("AddressToId")
                        .HasColumnName("address_to_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<long>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("bigint");

                    b.Property<int>("BlockIndex")
                        .HasColumnName("block_index")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BlockTime")
                        .HasColumnName("block_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_transfers");

                    b.HasIndex("AddressFromId");

                    b.HasIndex("AddressToId");

                    b.HasIndex("AssetId")
                        .HasName("ix_transfers_asset_id");

                    b.HasIndex("TransactionId")
                        .HasName("ix_transfers_transaction_id");

                    b.ToTable("transfers");
                });

            modelBuilder.Entity("NEO.Api.Models.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.HasKey("Id")
                        .HasName("pk_wallets");

                    b.HasIndex("Address")
                        .HasName("index_wallets_address");

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("NEO.Api.Models.Assets", b =>
                {
                    b.HasOne("NEO.Api.Models.Wallet", "AdminWallet")
                        .WithMany()
                        .HasForeignKey("AdminWalletId")
                        .HasConstraintName("fk_assets_wallets_admin_wallet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEO.Api.Models.Wallet", "OwnerWallet")
                        .WithMany()
                        .HasForeignKey("OwnerWalletId")
                        .HasConstraintName("fk_assets_wallets_owner_wallet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NEO.Api.Models.Transactions", b =>
                {
                    b.HasOne("NEO.Api.Models.Blocks", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockId")
                        .HasConstraintName("fk_transactions_blocks_block_temp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NEO.Api.Models.Transfers", b =>
                {
                    b.HasOne("NEO.Api.Models.Wallet", "AddressFrom")
                        .WithMany("TransfersOut")
                        .HasForeignKey("AddressFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEO.Api.Models.Wallet", "AddressTo")
                        .WithMany("TransfersIn")
                        .HasForeignKey("AddressToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEO.Api.Models.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_transfers_assets_asset_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEO.Api.Models.Transactions", "Transaction")
                        .WithMany("Transfers")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("fk_transfers_transactions_transaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
